server.port=9191

spring.application.name=API-GATEWAY
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
management.endpoints.web.exposure.include=*

management.tracing.sampling.probability=1.0
logging.pattern.level='%5p [${spring.application.name}, %X{traceId:-}, %X{spanId:-}]'

spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedOrigins=*
spring.cloud.gateway.globalcors.corsConfigurations.[/**].allowedMethods=GET,POST,PUT,DELETE

# These allow automatic creation of routes and turn all the service id's to lowercase
# this approach will require to put /service-name/ , before the /api route
# typically in production code usually to hide service-name manual approach is preferred
#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# Enable spring cloud gateway logging on DEBUG level to see what routes it generates
#logging.level.org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping=DEBUG

## Routes for Employee Service
spring.cloud.gateway.routes[0].id=EMPLOYEE-SERVICE
spring.cloud.gateway.routes[0].uri=lb://EMPLOYEE-SERVICE
# TODO might be a security concern as we allow all paths after /api/employees/**, but this
#  TODO could be false as I need to figure whether or not spring cloud + eureka has
#  TODO some measures of protection out of the box
# TODO an appropriate pen-test could show some insights
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/employees/**

spring.cloud.gateway.routes[1].id=DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].uri=lb://DEPARTMENT-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/departments/**

spring.cloud.gateway.routes[2].id=ORGANIZATION-SERVICE
spring.cloud.gateway.routes[2].uri=lb://ORGANIZATION-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/organizations/**
